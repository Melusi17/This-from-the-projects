@model IbhayiPharmacy.Models.PharmacistVM.DispenseOrderVM
@{
    ViewData["Title"] = "Process Order - Ibhayi Pharmacy";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Process Order - Ibhayi Pharmacy</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        /* ===== GLOBAL STYLES ===== */
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Segoe UI', sans-serif;
            background-color: #f4f6f9;
            color: #333;
            overflow-x: hidden;
        }

        /* ===== SIDEBAR ===== */
        .sidebar {
            width: 220px;
            background: linear-gradient(to bottom, #22586A, #22586A);
            height: 100vh;
            padding: 20px 0;
            position: fixed;
            top: 0;
            left: 0;
            box-shadow: 2px 0 10px rgba(0,0,0,0.1);
            z-index: 1000;
            transition: all 0.3s ease;
        }

            .sidebar.collapsed {
                width: 70px;
                overflow: hidden;
            }

                .sidebar.collapsed .sidebar-header h2 span,
                .sidebar.collapsed .sidebar-nav a span,
                .sidebar.collapsed .sidebar-footer {
                    display: none;
                }

                .sidebar.collapsed .sidebar-header h2 {
                    justify-content: center;
                }

                .sidebar.collapsed .sidebar-nav a {
                    justify-content: center;
                    padding: 10px;
                }

        .sidebar-header {
            padding: 0 20px 20px;
            border-bottom: 1px solid #34495e;
            margin-bottom: 15px;
            display: flex;
            flex-direction: column;
        }

        .sidebar h2 {
            font-size: 22px;
            margin: 0;
            color: white;
            display: flex;
            align-items: center;
            gap: 10px;
        }

            .sidebar h2 i {
                color: #3498db;
            }

        .sidebar-nav {
            padding: 0 10px;
        }

        .sidebar a {
            color: #ecf0f1;
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 12px;
            margin: 8px 0;
            padding: 10px 15px;
            border-radius: 5px;
            transition: all 0.3s;
        }

            .sidebar a:hover, .sidebar a.active {
                background-color: #34495e;
                transform: translateX(5px);
            }

        .sidebar-footer {
            position: absolute;
            bottom: 20px;
            width: 100%;
            padding: 0 20px;
            font-size: 12px;
            color: #7f8c8d;
            transition: all 0.3s;
        }

        .toggle-sidebar {
            position: absolute;
            top: 20px;
            right: -15px;
            background: #2c3e50;
            color: white;
            border: none;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 0 5px rgba(0,0,0,0.2);
            z-index: 1001;
        }

        /* ===== TOPBAR ===== */
        .topbar {
            background-color: #ffffff;
            height: 60px;
            padding: 0 20px;
            position: fixed;
            left: 220px;
            right: 0;
            top: 0;
            border-bottom: 1px solid #ccc;
            display: flex;
            justify-content: space-between;
            align-items: center;
            z-index: 999;
            transition: all 0.3s ease;
        }

        .sidebar.collapsed + .topbar {
            left: 70px;
        }

        .topbar span {
            font-weight: bold;
            color: #2c3e50;
        }

        /* ===== MAIN CONTENT ===== */
        .main-content {
            margin-left: 220px;
            margin-top: 60px;
            padding: 30px;
            transition: all 0.3s ease;
        }

        .sidebar.collapsed ~ .main-content {
            margin-left: 70px;
        }

        /* ===== TWO-CARD LAYOUT ===== */
        .form-container-two-cards {
            display: grid;
            grid-template-areas:
                "patient"
                "meds";
            gap: 20px;
            max-width: 1200px;
            margin: 0 auto;
        }

        .card {
            background: white;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .patient-card {
            grid-area: patient;
        }

        .medication-card {
            grid-area: meds;
        }

        h3 {
            color: #2c3e50;
            margin-top: 0;
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
            margin-bottom: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        /* ===== ORDER STATUS ===== */
        .order-status-badge {
            padding: 8px 15px;
            border-radius: 20px;
            font-weight: bold;
            font-size: 14px;
            display: inline-block;
            margin-bottom: 15px;
        }

        .status-ordered {
            background-color: #fff3cd;
            color: #856404;
        }

        .status-ready {
            background-color: #d1ecf1;
            color: #0c5460;
        }

        .status-waiting {
            background-color: #f8d7da;
            color: #721c24;
        }

        /* ===== PROCESSING STATS ===== */
        .processing-stats {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .stat-item {
            background: #f8f9fa;
            padding: 10px 15px;
            border-radius: 5px;
            border-left: 4px solid #3498db;
        }

            .stat-item.pending {
                border-left-color: #f39c12;
            }

            .stat-item.dispensed {
                border-left-color: #27ae60;
            }

            .stat-item.rejected {
                border-left-color: #e74c3c;
            }

        .stat-number {
            font-size: 18px;
            font-weight: bold;
            color: #2c3e50;
        }

        .stat-label {
            font-size: 12px;
            color: #7f8c8d;
        }

        /* ===== PATIENT INFO GRID ===== */
        .patient-info-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        .detail-row {
            display: flex;
            margin-bottom: 10px;
        }

        .detail-label {
            font-weight: bold;
            width: 120px;
            color: #34495e;
        }

        .detail-value {
            flex: 1;
        }

        /* ===== ALERTS ===== */
        .alert {
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }

        .alert-danger {
            background-color: #f8d7da;
            border-left: 4px solid #dc3545;
            color: #721c24;
        }

        .alert-warning {
            background-color: #fff3cd;
            border-left: 4px solid #ffc107;
            color: #856404;
        }

        .alert-success {
            background-color: #d4edda;
            border-left: 4px solid #28a745;
            color: #155724;
        }

        .allergy-alert, .stock-alert {
            display: none;
        }

        /* ===== MEDICATION TABLE ===== */
        .medication-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

            .medication-table th {
                background: #3498db;
                color: white;
                padding: 12px;
                text-align: left;
            }

            .medication-table td {
                padding: 12px;
                border-bottom: 1px solid #eee;
                vertical-align: top;
            }

        /* ===== BADGES ===== */
        .badge {
            display: inline-block;
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: bold;
        }

        .bg-success {
            background-color: #d4edda;
            color: #155724;
        }

        .bg-warning {
            background-color: #fff3cd;
            color: #856404;
        }

        .bg-danger {
            background-color: #f8d7da;
            color: #721c24;
        }

        .bg-secondary {
            background-color: #e2e3e5;
            color: #383d41;
        }

        /* ===== BUTTONS ===== */
        .btn {
            background: #3498db;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.2s;
            margin-right: 10px;
        }

            .btn:hover {
                opacity: 0.9;
                transform: translateY(-2px);
            }

        .btn-sm {
            padding: 5px 10px;
            font-size: 12px;
        }

        .btn-dispense {
            background: #27ae60;
        }

        .btn-reject {
            background: #e74c3c;
        }

        .btn-complete {
            background: #9b59b6;
        }

        .btn:disabled {
            background: #95a5a6;
            cursor: not-allowed;
            transform: none;
        }

        .action-btn {
            color: #fff;
            background: none;
            border: none;
            cursor: pointer;
            font-size: 14px;
            padding: 5px;
            border-radius: 3px;
            margin-right: 5px;
        }

        .reject-btn {
            background-color: #e74c3c;
        }

        /* ===== CHECKBOX STYLES ===== */
        .dispense-checkbox {
            width: 18px;
            height: 18px;
            margin-right: 8px;
        }

        /* ===== ROW STATUS STYLES ===== */
        .rejected-row {
            background-color: #fce4e4 !important;
            opacity: 0.8;
        }

            .rejected-row .dispense-checkbox,
            .rejected-row .reject-btn {
                display: none;
            }

        .dispensed-row {
            background-color: #e8f5e9 !important;
        }

            .dispensed-row .dispense-checkbox,
            .dispensed-row .action-btn {
                display: none;
            }

        /* ===== ACTION BUTTONS CONTAINER ===== */
        .action-buttons-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 20px;
            padding-top: 15px;
            border-top: 1px solid #eee;
        }

        .left-actions {
            display: flex;
            gap: 10px;
        }

        .right-actions {
            display: flex;
            gap: 10px;
        }

        /* ===== MODAL STYLES ===== */
        .modal-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0,0,0,0.5);
            z-index: 2000;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background-color: white;
            border-radius: 8px;
            width: 500px;
            max-width: 90%;
            box-shadow: 0 4px 20px rgba(0,0,0,0.2);
            overflow: hidden;
        }

        .modal-header {
            padding: 15px 20px;
            background-color: #e74c3c;
            color: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

            .modal-header h4 {
                margin: 0;
                font-size: 18px;
            }

        .close-modal {
            background: none;
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
            padding: 0 5px;
        }

        .rejection-reasons {
            padding: 20px;
        }

        .reason-option {
            margin: 15px 0;
            display: flex;
            align-items: flex-start;
        }

            .reason-option input {
                margin-right: 10px;
                margin-top: 3px;
            }

            .reason-option label {
                flex: 1;
            }

        .custom-reason {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-top: 5px;
            display: none;
        }

        .modal-actions {
            padding: 15px 20px;
            background-color: #f5f5f5;
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }

        /* ===== REPEATS COLUMN STYLES ===== */
        .repeats-cell {
            text-align: center;
            font-weight: bold;
        }

        .repeats-zero {
            color: #e74c3c;
        }

        .repeats-available {
            color: #27ae60;
        }

        /* ===== RESPONSIVE ===== */
        @@media (max-width: 992px) {
            .patient-info-grid {
                grid-template-columns: 1fr;
            }

            .action-buttons-container {
                flex-direction: column;
                gap: 15px;
            }

            .left-actions, .right-actions {
                width: 100%;
                justify-content: center;
            }
        }
    </style>
</head>
<body>
    @Html.AntiForgeryToken()
    <!-- SIDEBAR -->
    <div class="sidebar" id="sidebar">
        <button class="toggle-sidebar" onclick="toggleSidebar()">
            <i class="fas fa-chevron-left" id="sidebarIcon"></i>
        </button>
        <div class="sidebar-header">
            <h2><i class="fas fa-prescription-bottle-alt"></i> <span>Pharmacist Panel</span></h2>
            <small style="color: #bdc3c7;">Dedicated Dictionary</small>
        </div>
        <nav class="sidebar-nav">
            <a href="@Url.Action("Index", "PharmacistDispensing")"><i class="fas fa-tachometer-alt"></i> Dashboard</a>
            <a href="LoadPrescriptions.html"><i class="fas fa-tachometer-alt"></i> Walk In Prescription</a>
            <a href="@Url.Action("Index", "PharmacistDispensing")"><i class="fas fa-clipboard-list"></i> Orders</a>
            <a href="unprocessedScripts.html"><i class="fas fa-file-prescription"></i> Unprocessed Scritps</a>
            <a href="processedScripts.html"><i class="fas fa-boxes"></i> Processed Scripts</a>
            <a href="TrackOrders.html"><i class="fas fa-boxes"></i> Track Orders</a>
            <a href="#"><i class="fas fa-sign-out-alt"></i> Logout</a>
        </nav>
        <div class="sidebar-footer">
            <p>Ibhayi Pharmacy v2.1</p>
        </div>
    </div>

    <!-- TOPBAR -->
    <div class="topbar">
        <span>Process Order - @Model.OrderNumber</span>
        <div>Welcome, <strong>Pharmacist</strong></div>
    </div>

    <!-- MAIN CONTENT -->
    <div class="main-content">
        <div class="form-container-two-cards">
            <!-- CARD 1: PATIENT INFO -->
            <div class="card patient-card">
                <h3><i class="fas fa-user-injured"></i> Patient Information</h3>

                <!-- Order Status -->
                <div class="order-status-badge status-ordered">
                    <i class="fas fa-shopping-cart"></i> Status: @Model.CurrentStatus
                </div>

                <!-- Processing Stats -->
                <div class="processing-stats">
                    <div class="stat-item pending">
                        <div class="stat-number">@Model.PendingCount</div>
                        <div class="stat-label">Pending</div>
                    </div>
                    <div class="stat-item dispensed">
                        <div class="stat-number">@Model.DispensedCount</div>
                        <div class="stat-label">Dispensed</div>
                    </div>
                    <div class="stat-item rejected">
                        <div class="stat-number">@Model.RejectedCount</div>
                        <div class="stat-label">Rejected</div>
                    </div>
                </div>

                <div class="patient-info-grid">
                    <div class="patient-details">
                        <div class="detail-row">
                            <span class="detail-label">Name:</span>
                            <span class="detail-value">@Model.CustomerName.Split(' ')[0]</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Surname:</span>
                            <span class="detail-value">@Model.CustomerName.Split(' ')[1]</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">ID Number:</span>
                            <span class="detail-value">@Model.CustomerIDNumber</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Email:</span>
                            <span class="detail-value">@Model.CustomerEmail</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Order Date:</span>
                            <span class="detail-value">@Model.OrderDate.ToString("dd/MM/yyyy")</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Total Due:</span>
                            <span class="detail-value">R @Model.TotalAmount.ToString("F2")</span>
                        </div>
                    </div>

                    <div class="medical-info">
                        <div class="alert alert-warning">
                            <h4><i class="fas fa-allergy"></i> Allergies</h4>
                            @if (Model.CustomerAllergies.Any())
                            {
                                <ul>
                                    @foreach (var allergy in Model.CustomerAllergies)
                                    {
                                        <li>@allergy</li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p>No known allergies</p>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- CARD 2: MEDICATION DISPENSING -->
            <div class="card medication-card">
                <h3><i class="fas fa-pills"></i> Medication Dispensing</h3>

                <!-- Alerts -->
                <div class="alert alert-danger allergy-alert" style="display: none;">
                    <i class="fas fa-exclamation-triangle"></i> <strong>ALLERGY WARNING:</strong> Patient is allergic to this medication!
                </div>

                <div class="alert alert-warning stock-alert" style="display: none;">
                    <i class="fas fa-box-open"></i> <strong>LOW STOCK:</strong> This medication is near reorder level!
                </div>

                @if (TempData["SuccessMessage"] != null)
                {
                    <div class="alert alert-success">
                        <i class="fas fa-check-circle"></i> @TempData["SuccessMessage"]
                    </div>
                }
                @if (TempData["ErrorMessage"] != null)
                {
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-circle"></i> @TempData["ErrorMessage"]
                    </div>
                }

                <table class="medication-table">
                    <thead>
                        <tr>
                            <th width="5%"></th>
                            <th width="20%">Medication</th>
                            <th width="8%">Schedule</th>
                            <th width="6%">Qty</th>
                            <th width="8%">Repeats</th>
                            <th width="14%">Instructions</th>
                            <th width="8%">Stock</th>
                            <th width="10%">Status</th>
                            <th width="15%">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="medsTableBody">
                        @foreach (var orderLine in Model.OrderLines)
                        {
                            var rowClass = "";
                            if (orderLine.Status == "Rejected") rowClass = "rejected-row";
                            if (orderLine.Status == "Dispensed") rowClass = "dispensed-row";

                            <tr class="@rowClass" id="row-@orderLine.OrderLineID">
                                <td>
                                    @if (orderLine.CanBeSelected)
                                    {
                                        <input type="checkbox" class="dispense-checkbox"
                                               value="@orderLine.OrderLineID"
                                               @(orderLine.IsSelected ? "checked" : "")>
                                    }
                                </td>
                                <td>
                                    <strong>@orderLine.MedicationName</strong><br>
                                    <small class="text-muted">@orderLine.DoctorName</small><br>
                                    <small><strong>Instructions:</strong> @orderLine.Instructions</small>
                                </td>
                                <td><span class="badge bg-info">@orderLine.Schedule</span></td>
                                <td>@orderLine.Quantity</td>
                                <td class="repeats-cell @(orderLine.RepeatsLeft == 0 ? "repeats-zero" : "repeats-available")">
                                    @orderLine.RepeatsLeft
                                </td>
                                <td>@orderLine.Instructions</td>
                                <td>
                                    <span class="@orderLine.StockStatusClass">
                                        @orderLine.CurrentStock
                                    </span>
                                    @if (orderLine.IsLowStock)
                                    {
                                        <br>
                                        <small class="text-danger">Low Stock</small>
                                    }
                                </td>
                                <td>
                                    <span class="badge @GetStatusBadgeClass(orderLine.Status)">
                                        @orderLine.Status
                                    </span>
                                </td>
                                <td>
                                    <div class="action-buttons">
                                        @if (orderLine.Status == "Pending")
                                        {
                                            <button class="action-btn reject-btn" onclick="showRejectionModal(@orderLine.OrderLineID, '@orderLine.MedicationName')">
                                                <i class="fas fa-ban"></i> Reject
                                            </button>
                                        }
                                        else if (orderLine.Status == "Rejected")
                                        {
                                            <small class="text-muted">@orderLine.RejectionReason</small>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                <!-- Action Buttons -->
                <div class="action-buttons-container">
                    <div class="left-actions">
                        <button class="btn btn-dispense" onclick="dispenseSelected()" id="dispenseBtn">
                            <i class="fas fa-pills"></i> Dispense Selected
                        </button>
                        <button class="btn" onclick="selectAllPending()">
                            <i class="fas fa-check-square"></i> Select All Pending
                        </button>
                    </div>
                    <div class="right-actions">
                        <button class="btn btn-complete" onclick="completeOrderProcessing()" id="completeBtn"
                                disabled="@(!Model.CanCompleteOrder)">
                            <i class="fas fa-check-circle"></i> Complete Order Processing
                        </button>
                        <a href="@Url.Action("Index", "PharmacistDispensing")" class="btn">
                            <i class="fas fa-arrow-left"></i> Back to Orders
                        </a>
                    </div>
                </div>

                <!-- Completion Info -->
                @if (Model.CanCompleteOrder)
                {
                    <div class="alert alert-info" style="margin-top: 15px;">
                        <i class="fas fa-info-circle"></i>
                        Order will be marked as <strong>@Model.ExpectedOrderStatus</strong> when completed.
                        @if (Model.AllItemsRejected)
                        {
                            <br>
                            <small>Customer will be notified that all medications were rejected.</small>
                        }
                    </div>
                }
                else
                {
                    <div class="alert alert-warning" style="margin-top: 15px;">
                        <i class="fas fa-exclamation-triangle"></i>
                        Please process all @Model.PendingCount pending medications before completing the order.
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- REJECTION MODAL -->
    <div class="modal-overlay" id="rejectionModal">
        <div class="modal-content">
            <div class="modal-header">
                <h4><i class="fas fa-ban"></i> Reject Medication</h4>
                <button class="close-modal" onclick="closeModal()">&times;</button>
            </div>
            <div class="rejection-reasons">
                <p>Please select the reason for rejecting <strong id="rejectMedicationName"></strong>:</p>
                <div class="reason-option">
                    <input type="radio" id="reason1" name="rejectionReason" value="Out of stock">
                    <label for="reason1">Out of stock</label>
                </div>
                <div class="reason-option">
                    <input type="radio" id="reason2" name="rejectionReason" value="Patient allergic to ingredient">
                    <label for="reason2">Patient allergic to ingredient</label>
                </div>
                <div class="reason-option">
                    <input type="radio" id="reason3" name="rejectionReason" value="Patient already has sufficient supply">
                    <label for="reason3">Patient already has sufficient supply</label>
                </div>
                <div class="reason-option">
                    <input type="radio" id="reason4" name="rejectionReason" value="Prescription expired">
                    <label for="reason4">Prescription expired</label>
                </div>
                <div class="reason-option">
                    <input type="radio" id="reason5" name="rejectionReason" value="Dosage form not available">
                    <label for="reason5">Dosage form not available</label>
                </div>
                <div class="reason-option">
                    <input type="radio" id="reason6" name="rejectionReason" value="Other">
                    <label for="reason6">Other (specify below)</label>
                    <textarea id="customReason" class="custom-reason" placeholder="Enter custom reason..."></textarea>
                </div>
            </div>
            <div class="modal-actions">
                <button class="btn" onclick="closeModal()">Cancel</button>
                <button class="btn btn-reject" onclick="confirmRejection()">Confirm Rejection</button>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let currentRejectionOrderLineId = null;
        const orderId = @Model.OrderID;

        // Toggle sidebar
        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            const icon = document.getElementById('sidebarIcon');

            sidebar.classList.toggle('collapsed');
            if (sidebar.classList.contains('collapsed')) {
                icon.classList.remove('fa-chevron-left');
                icon.classList.add('fa-chevron-right');
            } else {
                icon.classList.remove('fa-chevron-right');
                icon.classList.add('fa-chevron-left');
            }
        }

        // Show rejection modal
        function showRejectionModal(orderLineId, medicationName) {
            currentRejectionOrderLineId = orderLineId;
            document.getElementById('rejectMedicationName').textContent = medicationName;
            document.getElementById('rejectionModal').style.display = 'flex';

            document.querySelectorAll('input[name="rejectionReason"]').forEach(radio => {
                radio.addEventListener('change', function() {
                    document.getElementById('customReason').style.display =
                        this.value === 'Other' ? 'block' : 'none';
                });
            });
        }

        // Close modal
        function closeModal() {
            document.getElementById('rejectionModal').style.display = 'none';
            document.querySelectorAll('input[name="rejectionReason"]').forEach(radio => {
                radio.checked = false;
            });
            document.getElementById('customReason').style.display = 'none';
            document.getElementById('customReason').value = '';
            currentRejectionOrderLineId = null;
        }

        // Confirm rejection
        async function confirmRejection() {
            const selectedReason = document.querySelector('input[name="rejectionReason"]:checked');

            if (!selectedReason) {
                alert('Please select a rejection reason');
                return;
            }

            let rejectionReason = selectedReason.value;
            if (rejectionReason === 'Other') {
                rejectionReason = document.getElementById('customReason').value;
                if (!rejectionReason.trim()) {
                    alert('Please enter a rejection reason');
                    return;
                }
            }

            try {
                const formData = new FormData();
                formData.append('orderLineId', currentRejectionOrderLineId);
                formData.append('rejectionReason', rejectionReason);

                const response = await fetch('@Url.Action("RejectOrderLine", "PharmacistDispensing")', {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                const result = await response.json();

                if (result.success) {
                    window.location.reload();
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                alert('Error rejecting medication. Please try again.');
            }
        }

        // Dispense selected medications
        async function dispenseSelected() {
            const selectedCheckboxes = document.querySelectorAll('.dispense-checkbox:checked');
            const selectedIds = Array.from(selectedCheckboxes).map(cb => parseInt(cb.value));

            if (selectedIds.length === 0) {
                alert('Please select at least one medication to dispense');
                return;
            }

            if (!confirm(`Dispense ${selectedIds.length} selected medication(s)?`)) {
                return;
            }

            try {
                const formData = new FormData();
                formData.append('orderId', orderId);
                selectedIds.forEach(id => formData.append('selectedOrderLineIds', id));

                const response = await fetch('@Url.Action("DispenseSelectedOrderLines", "PharmacistDispensing")', {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                const result = await response.json();

                if (result.success) {
                    alert(result.message);
                    window.location.reload();
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                alert('Error dispensing medications. Please try again.');
            }
        }

        // Select all pending medications
        function selectAllPending() {
            const pendingCheckboxes = document.querySelectorAll('.dispense-checkbox');
            pendingCheckboxes.forEach(checkbox => {
                checkbox.checked = true;
            });
            updateSelectionUI();
        }

        // Complete order processing
        async function completeOrderProcessing() {
            if (!confirm('Complete order processing? This will update the order status and cannot be undone.')) {
                return;
            }

            try {
                const formData = new FormData();
                formData.append('orderId', orderId);

                const response = await fetch('@Url.Action("CompleteOrderProcessing", "PharmacistDispensing")', {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                if (response.ok) {
                    window.location.href = '@Url.Action("Index", "PharmacistDispensing")';
                } else {
                    alert('Error completing order processing');
                }
            } catch (error) {
                alert('Error completing order processing. Please try again.');
            }
        }

        // Update UI based on selection
        function updateSelectionUI() {
            const selectedCount = document.querySelectorAll('.dispense-checkbox:checked').length;
            const dispenseBtn = document.getElementById('dispenseBtn');

            if (selectedCount > 0) {
                dispenseBtn.textContent = `Dispense Selected (${selectedCount})`;
            } else {
                dispenseBtn.textContent = 'Dispense Selected';
            }
        }

        // Initialize event listeners
        document.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('.dispense-checkbox').forEach(checkbox => {
                checkbox.addEventListener('change', updateSelectionUI);
            });

            updateSelectionUI();
        });
    </script>
</body>
</html>

@functions {
    public string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Dispensed" => "bg-success",
            "Rejected" => "bg-danger",
            "Pending" => "bg-warning",
            _ => "bg-secondary"
        };
    }
}