@model IbhayiPharmacy.Models.PharmacistVM.CustomerDashboardVM
@{
    ViewData["Title"] = "Customer Dashboard";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Customer Dashboard</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <style>
        /* Your exact CSS styles */
        body {
            margin: 0;
            font-family: 'Segoe UI', sans-serif;
            background-color: #f4f6f9;
            overflow: hidden;
        }

        .dashboard-wrapper {
            display: flex;
            height: 100vh;
        }

        .sidebar {
            width: 220px;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            padding: 20px;
            box-shadow: 0 0 10px rgba(0,0,0,0.05);
        }

        .sidebar-left {
            background: linear-gradient(to bottom, #22586A, #22586A);
            color: white;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100vh;
            padding: 10px;
        }

        .main-content {
            flex: 1;
            padding: 30px;
            overflow-y: auto;
        }

        .sidebar-right {
            background: linear-gradient(145deg, #ffffff, #f0f0f0);
            border-top-left-radius: 30px;
            border-bottom-left-radius: 30px;
            border-left: 1px solid #ddd;
            width: 180px;
        }

        .upload-prescription-panel {
            background: white;
            padding: 30px;
            border-radius: 16px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.07);
            max-width: 1200px;
            margin: 20px auto;
        }

        .btn-upload {
            background-color: #1f9f77;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 15px;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            .btn-upload:hover {
                background-color: #28bf96;
            }

        .prescription-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 15px;
            font-size: 14px;
        }

            .prescription-table th,
            .prescription-table td {
                padding: 12px 15px;
                border: 1px solid #ccc;
                text-align: left;
            }

            .prescription-table th {
                background-color: #e0f2f1;
                color: #004d40;
            }

        .drop-area {
            border: 2px dashed #1f9f77;
            padding: 40px;
            text-align: center;
            cursor: pointer;
            color: #1f9f77;
            border-radius: 10px;
            margin-bottom: 20px;
            transition: background-color 0.3s;
        }

            .drop-area.drag-over {
                background-color: #e0f7f1;
                border-color: #28bf96;
            }

        .sidebar-button-container {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            width: 100%;
        }

        .sidebar-button {
            display: block;
            width: 100%;
            text-align: left;
            padding: 15px 25px;
            margin: 5px 0;
            background: transparent;
            color: white;
            font-weight: bold;
            text-decoration: none;
            border: none;
            border-radius: 25px 0 0 25px;
            cursor: pointer;
            transition: background 0.3s ease, transform 0.2s ease;
            font-size: 16px;
        }

            .sidebar-button:hover {
                background-color: rgba(255, 255, 255, 0.15);
                transform: translateX(5px);
                color: #e0f7f5;
            }

        .hidden {
            display: none;
        }

        /* Add all other CSS styles from your original HTML */
        .profile-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            position: relative;
            margin-bottom: 30px;
        }

        .profile-icon img {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            cursor: pointer;
            border: 3px solid #1f9f77;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            transition: transform 0.2s;
        }

            .profile-icon img:hover {
                transform: scale(1.05);
            }

        .profile-menu {
            position: absolute;
            top: 70px;
            right: 0;
            background: #fff;
            border: 1px solid #ccc;
            box-shadow: 0 2px 6px rgba(0,0,0,0.15);
            padding: 10px;
            border-radius: 8px;
            width: 160px;
            z-index: 10;
        }

        .file-preview {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .btn-remove {
            background-color: #e74c3c;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
        }

        .checkbox-container {
            margin-top: 15px;
            text-align: left;
        }

        .checkbox-label {
            display: flex;
            align-items: center;
            font-weight: 500;
            font-size: 14px;
            color: #333;
            gap: 8px;
        }

        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.6);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }

        .modal-content {
            background: white;
            padding: 30px;
            border-radius: 16px;
            width: 90%;
            max-width: 800px;
            box-shadow: 0 4px 16px rgba(0,0,0,0.2);
            max-height: 90vh;
            overflow-y: auto;
        }

        .order-container {
            background: white;
            padding: 20px 30px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }

        .order-section {
            background: #ffffff;
            border: 1px solid #ccc;
            padding: 20px;
            margin-bottom: 25px;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }

        .medication-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
        }

            .medication-table th, .medication-table td {
                border: 1px solid #ccc;
                padding: 8px;
                text-align: center;
            }

        .summary {
            margin-top: 30px;
            padding: 20px;
            background-color: #e6f5f1;
            border-left: 4px solid #1f9f77;
            border-radius: 8px;
        }

        .track-order-panel {
            background: white;
            padding: 30px;
            border-radius: 16px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.07);
            max-width: 800px;
            margin: 0 auto;
        }

        /* Loading animation */
        .loading {
            text-align: center;
            color: #666;
            font-style: italic;
        }

        .error-message {
            text-align: center;
            color: #e74c3c;
            font-weight: 500;
        }

        .success-message {
            text-align: center;
            color: #1f9f77;
            font-weight: 500;
            background-color: #e6f5f1;
            padding: 10px;
            border-radius: 5px;
            margin: 10px 0;
        }

        /* Styles for rejected medications */
        .rejected-row {
            background-color: #ffeaea !important;
            color: #666;
        }

        .rejected-checkbox:disabled {
            cursor: not-allowed;
            opacity: 0.6;
        }

        .fixed-qty {
            background-color: #f5f5f5;
            color: #333;
            border: 1px solid #ddd;
            cursor: not-allowed;
        }

        .rejected-price {
            color: #999;
            text-decoration: line-through;
        }

        .status-badge {
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: bold;
        }

        .status-approved {
            background-color: #e6f5f1;
            color: #1f9f77;
        }

        .status-rejected {
            background-color: #ffeaea;
            color: #e74c3c;
        }

        /* NEW: Order status badges */
        .status-dispensed {
            background-color: #e6f5f1;
            color: #1f9f77;
        }

        .status-pending {
            background-color: #fff3cd;
            color: #856404;
        }

        /* Upload progress */
        .upload-progress {
            margin: 10px 0;
            display: none;
        }

        .progress-bar {
            width: 100%;
            height: 6px;
            background-color: #f0f0f0;
            border-radius: 3px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background-color: #1f9f77;
            width: 0%;
            transition: width 0.3s ease;
        }

        .filename-cell {
            font-family: 'Courier New', monospace;
            font-weight: bold;
            color: #22586A;
        }

        /* Order status indicators */
        .order-status-ordered {
            background-color: #fff3cd;
            color: #856404;
            padding: 4px 8px;
            border-radius: 4px;
            font-weight: bold;
        }

        .order-status-ready {
            background-color: #d1ecf1;
            color: #0c5460;
            padding: 4px 8px;
            border-radius: 4px;
            font-weight: bold;
        }

        .order-status-collected {
            background-color: #e6f5f1;
            color: #1f9f77;
            padding: 4px 8px;
            border-radius: 4px;
            font-weight: bold;
        }

        /* Dashboard welcome panel */
        .welcome-panel {
            background: white;
            padding: 40px;
            border-radius: 16px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.07);
            max-width: 800px;
            margin: 50px auto;
            text-align: center;
        }

        .welcome-title {
            font-size: 28px;
            color: #1f9f77;
            margin-bottom: 15px;
        }

        .welcome-subtitle {
            font-size: 16px;
            color: #666;
            margin-bottom: 30px;
        }

        .feature-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-top: 30px;
        }

        .feature-card {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            border-left: 4px solid #1f9f77;
            text-align: center;
        }

        .feature-icon {
            font-size: 24px;
            margin-bottom: 10px;
        }

        .feature-title {
            font-weight: 600;
            color: #333;
            margin-bottom: 5px;
        }

        .feature-desc {
            font-size: 14px;
            color: #666;
        }
    </style>
</head>
<body>
    <div class="dashboard-wrapper">
        <!-- Left Sidebar -->
        <aside class="sidebar sidebar-left">
            <div class="sidebar-header">
                <img style="height:160px;width:220px;" src="~/css/img/ibhayi2.png" alt="Ibhayi Pharmacy" />
            </div>
            <div class="sidebar-content">
                <nav>
                    <div class="sidebar-button-container">
                        <a asp-controller="CustomerDashboard" asp-action="UploadPrescription" class="sidebar-button">📥 Upload Prescription</a>
                        <a asp-controller="CustomerDashboard" asp-action="PlaceOrder" class="sidebar-button">🛒 Place Orders</a>
                        <a asp-controller="CustomerDashboard" asp-action="TrackOrder" class="sidebar-button">📦 Track Orders</a>
                        <a asp-controller="CustomerDashboard" asp-action="ManageRepeats" class="sidebar-button">🔁 Manage Repeats</a>
                        <a asp-controller="CustomerDashboard" asp-action="ViewReports" class="sidebar-button">📄 View Reports</a>
                        <a asp-controller="Home" asp-action="Index" class="sidebar-button" onclick="return confirm('Are you sure you want to log out?');">
                            &#10145; Logout
                        </a>
                    </div>
                </nav>
            </div>
        </aside>

        <!-- Main Content -->
        <main class="main-content" id="mainContent">
            <!-- Dashboard Home -->
            @if (ViewContext.RouteData.Values["action"].ToString() == "Index")
            {
                <div class="welcome-panel">
                    <h1 class="welcome-title">Welcome to Your Dashboard</h1>
                    <p class="welcome-subtitle">Manage your prescriptions, orders, and medications in one place</p>

                    <div class="feature-grid">
                        <div class="feature-card">
                            <div class="feature-icon">📥</div>
                            <div class="feature-title">Upload Prescription</div>
                            <div class="feature-desc">Upload your doctor's prescription for processing</div>
                        </div>
                        <div class="feature-card">
                            <div class="feature-icon">🛒</div>
                            <div class="feature-title">Place Orders</div>
                            <div class="feature-desc">Order medications from processed prescriptions</div>
                        </div>
                        <div class="feature-card">
                            <div class="feature-icon">📦</div>
                            <div class="feature-title">Track Orders</div>
                            <div class="feature-desc">Monitor your order status and medication fulfillment</div>
                        </div>
                        <div class="feature-card">
                            <div class="feature-icon">🔁</div>
                            <div class="feature-title">Manage Repeats</div>
                            <div class="feature-desc">Request refills for your repeat medications</div>
                        </div>
                    </div>
                </div>
            }

            <!-- Upload Prescription Section -->
            @if (ViewContext.RouteData.Values["action"].ToString() == "UploadPrescription")
            {
                <div class="upload-prescription-panel">
                    <h2>📥 Upload Prescription</h2>

                    <!-- Upload Status Messages -->
                    <div id="uploadStatus"></div>

                    <!-- Upload Progress -->
                    <div id="uploadProgress" class="upload-progress">
                        <div class="progress-bar">
                            <div class="progress-fill" id="progressFill"></div>
                        </div>
                        <p id="progressText">Uploading...</p>
                    </div>

                    <!-- Upload Form -->
                    <form id="uploadForm" method="post" enctype="multipart/form-data">
                        @Html.AntiForgeryToken()

                        <!-- Drop area -->
                        <div id="drop-area" class="drop-area">
                            <p>Drag & Drop PDF file here or click to select</p>
                            <input type="file" id="prescriptionFile" name="file" accept=".pdf" required hidden>
                        </div>

                        <!-- File preview with remove button -->
                        <div id="filePreview" class="file-preview" style="display:none;">
                            <span id="fileName"></span>
                            <button type="button" class="btn-remove" onclick="removeSelectedFile()">❌ Remove</button>
                        </div>

                        <!-- Dispense checkbox -->
                        <div class="checkbox-container">
                            <label class="checkbox-label">
                                <input type="checkbox" id="dispenseCheckbox" name="dispenseUponApproval">
                                Dispense this prescription upon approval
                            </label>
                        </div>

                        <!-- Upload Button -->
                        <button type="button" class="btn-upload" onclick="uploadPrescription()">Upload Prescription</button>
                    </form>

                    <!-- Unprocessed Prescriptions -->
                    <div style="margin-top: 40px;">
                        <h2>📋 Unprocessed Prescriptions</h2>
                        <div id="unprocessedPrescriptions">
                            @if (Model.UnprocessedPrescriptions.Any())
                            {
                                <table class="prescription-table">
                                    <thead>
                                        <tr>
                                            <th>Filename</th>
                                            <th>Date</th>
                                            <th>Status</th>
                                            <th>Dispense</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="unprocessedPrescriptionsBody">
                                        @foreach (var prescription in Model.UnprocessedPrescriptions)
                                        {
                                            <tr id="prescription-@prescription.PrescriptionID">
                                                <td class="filename-cell">Prescription_@(prescription.PrescriptionID.ToString("D3"))</td>
                                                <td>@prescription.DateIssued.ToString("yyyy-MM-dd")</td>
                                                <td>@(prescription.Status ?? "Pending")</td>
                                                <td>@(prescription.DispenseUponApproval ? "Yes" : "No")</td>
                                                <td>
                                                    <a href="@Url.Action("DownloadPrescription", "CustomerDashboard", new { id = prescription.PrescriptionID })" class="btn-upload">Download</a>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            }
                            else
                            {
                                <p id="noUnprocessedMessage">No unprocessed prescriptions found.</p>
                            }
                        </div>
                    </div>

                    <!-- Processed Prescriptions -->
                    <div style="margin-top: 40px;">
                        <h2>✅ Processed Prescriptions</h2>
                        @if (Model.ProcessedPrescriptions.Any())
                        {
                            <table class="prescription-table">
                                <thead>
                                    <tr>
                                        <th>Filename</th>
                                        <th>Date</th>
                                        <th>Doctor</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var prescription in Model.ProcessedPrescriptions)
                                    {
                                        <tr>
                                            <td class="filename-cell">Prescription_@(prescription.PrescriptionID.ToString("D3"))</td>
                                            <td>@prescription.DateIssued.ToString("yyyy-MM-dd")</td>
                                            <td>@(prescription.Doctors?.Name ?? "Not Assigned")</td>
                                            <td>
                                                @if (prescription.Status == "Processed")
                                                {
                                                    <span class="status-badge status-approved">✅ Processed</span>
                                                }
                                                else if (prescription.Status == "Partially Processed")
                                                {
                                                    <span class="status-badge status-pending">⚠️ Partially Processed</span>
                                                }
                                                else if (prescription.Status == "Rejected")
                                                {
                                                    <span class="status-badge status-rejected">❌ Rejected</span>
                                                }
                                                else
                                                {
                                                    @prescription.Status
                                                }
                                            </td>
                                            <td>
                                                <a href="@Url.Action("DownloadPrescription", "CustomerDashboard", new { id = prescription.PrescriptionID })" class="btn-upload">Download</a>
                                                <button class="btn-upload" onclick="openOrderModal('@prescription.DateIssued.ToString("yyyy-MM-dd")', '@(prescription.Doctors?.Name ?? "Not Assigned")', @prescription.PrescriptionID)">Order</button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <p>No processed prescriptions found.</p>
                        }
                    </div>
                </div>
            }

            <!-- Place Order Section -->
            @if (ViewContext.RouteData.Values["action"].ToString() == "PlaceOrder")
            {
                <div class="upload-prescription-panel">
                    <h2>🛒 Place Orders</h2>
                    <p>This feature is currently available through the prescription ordering modal.</p>
                    <p>Please go to <strong>Upload Prescription</strong> → Select a processed prescription → Click <strong>Order</strong> to place your medication order.</p>
                </div>
            }

            <!-- Track Order, Manage Repeats, View Reports, and Profile Sections -->
            <!-- These will now load as separate pages when clicked -->
            @if (ViewContext.RouteData.Values["action"].ToString() == "TrackOrder" ||
                        ViewContext.RouteData.Values["action"].ToString() == "ManageRepeats" ||
                        ViewContext.RouteData.Values["action"].ToString() == "ViewReports" ||
                        ViewContext.RouteData.Values["action"].ToString() == "Profile")
            {
                <div class="upload-prescription-panel">
                    <h2>Redirecting...</h2>
                    <p>Please use the navigation menu to access this feature.</p>
                    <p>If you're not redirected automatically, <a href="@Url.Action("Index", "CustomerDashboard")">click here</a> to return to the dashboard.</p>
                </div>

                <script>
                    // Redirect to the actual page
                    window.location.href = '@Url.Action(ViewContext.RouteData.Values["action"].ToString(), "CustomerDashboard")';
                </script>
            }
        </main>

        <!-- Right Sidebar -->
        <aside class="sidebar sidebar-right">
            <div class="profile-container">
                <div class="profile-icon" onclick="toggleProfileMenu()">
                    <img src="~/css/img/Customer_img/Profile.png" alt="Profile" />
                </div>
                <div id="profileMenu" class="profile-menu hidden">
                    <a asp-controller="CustomerDashboard" asp-action="Profile" class="sidebar-button">👤 Account</a>
                    <a asp-controller="Home" asp-action="Index" class="sidebar-button">🚪 Logout</a>
                </div>
            </div>

            <div class="notifications" style="background-color: #ffffff; border: 1px solid #dcdcdc; padding: 20px; border-radius: 12px; box-shadow: 0 4px 8px rgba(0,0,0,0.05); margin: 20px 0;">
                <h4 style="font-size: 18px; margin-bottom: 15px; color: #333;">🔔 Notifications</h4>
                <ul style="list-style-type: none; padding: 0; margin: 0;">
                    <li style="padding: 12px 0; border-bottom: 1px solid #eee; font-size: 15px; color: #555;">
                        🏥 Your <strong>Amoxicillin</strong> prescription is due for a refill.
                    </li>
                    <li style="padding: 12px 0; font-size: 15px; color: #555;">
                        📧 IBhayi Pharmacy order <strong>[ORD202505341]</strong> is ready for collection.
                    </li>
                </ul>
            </div>
        </aside>
    </div>

    <!-- Medication Order Modal -->
    <div id="orderModal" class="modal-overlay" style="display: none;">
        <div class="modal-content">
            <h2>🩺 Order Medication</h2>
            <div class="order-details">
                <p><strong>Date:</strong> <span id="modalDate">2025-05-13</span></p>
                <p><strong>Doctor:</strong> <span id="modalDoctor">Dr. John Smith</span></p>
                <input type="hidden" id="modalPrescriptionId" value="0">
            </div>

            <table class="prescription-table">
                <thead>
                    <tr>
                        <th>Select</th>
                        <th>Medication</th>
                        <th>Status</th>
                        <th>Prescribed Qty</th>
                        <th>Instructions</th>
                        <th>Repeats</th>
                        <th>Price (R)</th>
                        <th id="rejectionHeader" style="display: none;">Rejection Reason</th>
                    </tr>
                </thead>
                <tbody id="modalMedications">
                    <!-- Medications will be populated dynamically -->
                </tbody>
            </table>

            <div class="total-summary">
                <p><strong>Total (incl. VAT): R</strong><span id="totalDue">0.00</span></p>
            </div>

            <button class="btn-upload" onclick="placeMedicationOrder()">Place Order</button>
            <button class="btn-upload" style="background-color: grey;" onclick="closeModal()">Close</button>
        </div>
    </div>

    <script>
        // File upload functionality
        document.addEventListener("DOMContentLoaded", function () {
            setupFileUpload();
        });

        function setupFileUpload() {
            const dropArea = document.getElementById('drop-area');
            const fileInput = document.getElementById('prescriptionFile');
            const filePreview = document.getElementById('filePreview');
            const fileNameDisplay = document.getElementById('fileName');

            if (!dropArea || !fileInput) return;

            dropArea.addEventListener('click', () => fileInput.click());

            fileInput.addEventListener('change', (e) => {
                handleFileUpload(e.target.files[0]);
            });

            dropArea.addEventListener('dragover', (e) => {
                e.preventDefault();
                dropArea.classList.add('drag-over');
            });

            dropArea.addEventListener('dragleave', () => {
                dropArea.classList.remove('drag-over');
            });

            dropArea.addEventListener('drop', (e) => {
                e.preventDefault();
                dropArea.classList.remove('drag-over');
                const file = e.dataTransfer.files[0];
                if (file) {
                    fileInput.files = e.dataTransfer.files;
                    handleFileUpload(file);
                }
            });

            function handleFileUpload(file) {
                if (file.type !== 'application/pdf') {
                    showUploadStatus('Please select a PDF file only.', 'error');
                    return;
                }
                fileNameDisplay.textContent = file.name;
                filePreview.style.display = 'flex';
            }
        }

        function removeSelectedFile() {
            const fileInput = document.getElementById('prescriptionFile');
            const filePreview = document.getElementById('filePreview');
            const fileNameDisplay = document.getElementById('fileName');

            if (fileInput) {
                fileInput.value = "";
                filePreview.style.display = "none";
                fileNameDisplay.textContent = "";
            }
        }

        // Upload prescription via AJAX
        async function uploadPrescription() {
            const fileInput = document.getElementById('prescriptionFile');
            const file = fileInput.files[0];
            const dispenseCheckbox = document.getElementById('dispenseCheckbox');

            if (!file) {
                showUploadStatus('Please select a file to upload.', 'error');
                return;
            }

            if (file.type !== 'application/pdf') {
                showUploadStatus('Only PDF files are allowed.', 'error');
                return;
            }

            // Show progress
            showUploadProgress(true);
            showUploadStatus('', 'clear');

            const formData = new FormData();
            formData.append('file', file);
            formData.append('dispenseUponApproval', dispenseCheckbox.checked);
            formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

            try {
                const response = await fetch('@Url.Action("UploadPrescription", "CustomerDashboard")', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    showUploadStatus('✅ ' + result.message, 'success');
                    addPrescriptionToTable(result);
                    removeSelectedFile();
                    resetForm();
                } else {
                    showUploadStatus('❌ ' + result.message, 'error');
                }
            } catch (error) {
                showUploadStatus('❌ Error uploading prescription: ' + error.message, 'error');
            } finally {
                showUploadProgress(false);
            }
        }

        function showUploadStatus(message, type) {
            const statusDiv = document.getElementById('uploadStatus');
            statusDiv.innerHTML = '';

            if (message) {
                const messageDiv = document.createElement('div');
                messageDiv.className = type === 'success' ? 'success-message' : 'error-message';
                messageDiv.textContent = message;
                statusDiv.appendChild(messageDiv);
            }
        }

        function showUploadProgress(show) {
            const progressDiv = document.getElementById('uploadProgress');
            if (show) {
                progressDiv.style.display = 'block';
                document.getElementById('progressFill').style.width = '0%';
            } else {
                progressDiv.style.display = 'none';
            }
        }

        function addPrescriptionToTable(result) {
            // Remove "no prescriptions" message if it exists
            const noUnprocessedMessage = document.getElementById('noUnprocessedMessage');
            if (noUnprocessedMessage) {
                noUnprocessedMessage.remove();
            }

            // Get or create the table body
            let tbody = document.getElementById('unprocessedPrescriptionsBody');
            if (!tbody) {
                // Create table structure if it doesn't exist
                const table = document.createElement('table');
                table.className = 'prescription-table';
                table.innerHTML = `
                    <thead>
                        <tr>
                            <th>Filename</th>
                            <th>Date</th>
                            <th>Status</th>
                            <th>Dispense</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="unprocessedPrescriptionsBody"></tbody>
                `;
                document.getElementById('unprocessedPrescriptions').appendChild(table);
                tbody = document.getElementById('unprocessedPrescriptionsBody');
            }

            // Format the prescription ID with leading zeros
            const formattedId = result.prescriptionId.toString().padStart(3, '0');

            // Add new prescription row
            const newRow = document.createElement('tr');
            newRow.id = 'prescription-' + result.prescriptionId;
            newRow.innerHTML = `
                <td class="filename-cell">Prescription_${formattedId}</td>
                <td>${result.date}</td>
                <td>${result.status}</td>
                <td>${result.dispense}</td>
                <td>
                    <a href="@Url.Action("DownloadPrescription", "CustomerDashboard")/${result.prescriptionId}" class="btn-upload">Download</a>
                </td>
            `;

            tbody.appendChild(newRow);
        }

        function resetForm() {
            document.getElementById('dispenseCheckbox').checked = false;
        }

        // Modal functions (keep your existing modal functions)
        function openOrderModal(date, doctor, prescriptionId) {
            console.log('Opening order modal for prescription:', prescriptionId);
            document.getElementById("modalDate").textContent = date;
            document.getElementById("modalDoctor").textContent = doctor;
            document.getElementById("modalPrescriptionId").value = prescriptionId;
            document.getElementById("orderModal").style.display = "flex";

            // Show loading state
            const tbody = document.getElementById('modalMedications');
            tbody.innerHTML = '<tr><td colspan="8" class="loading">🔄 Loading medications...</td></tr>';

            loadMedicationsForOrder(prescriptionId);
        }

        function closeModal() {
            document.getElementById("orderModal").style.display = "none";
        }

        async function loadMedicationsForOrder(prescriptionId) {
            try {
                console.log('Loading medications for prescription:', prescriptionId);
                const response = await fetch('@Url.Action("GetPrescriptionMedications", "CustomerDashboard")?prescriptionId=' + prescriptionId);

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const medications = await response.json();
                console.log('Medications returned:', medications);

                const tbody = document.getElementById('modalMedications');
                tbody.innerHTML = '';

                if (!medications || medications.length === 0) {
                    tbody.innerHTML = '<tr><td colspan="8" class="loading">No medications found for this prescription</td></tr>';
                    return;
                }

                let hasRejectedMeds = false;

                medications.forEach(med => {
                    const isRejected = med.status === "Rejected";
                    const isApproved = med.status === "Approved";

                    if (isRejected) {
                        hasRejectedMeds = true;
                    }

                    const row = document.createElement('tr');
                    if (isRejected) {
                        row.classList.add('rejected-row');
                    }

                    const statusBadge = isApproved ?
                        '<span class="status-badge status-approved">✅ Approved</span>' :
                        isRejected ?
                        '<span class="status-badge status-rejected">❌ Rejected</span>' :
                        '<span class="status-badge status-pending">⏳ Pending</span>';

                    const checkbox = isRejected ?
                        `<input type="checkbox" class="med-check rejected-checkbox" disabled data-price="${med.price}" data-medicationid="${med.medicationId}" data-scriptlineid="${med.scriptLineId}">` :
                        `<input type="checkbox" class="med-check" data-price="${med.price}" data-medicationid="${med.medicationId}" data-scriptlineid="${med.scriptLineId}" onchange="updateTotal()">`;

                    // ALL medications have fixed quantity (readonly)
                    const quantityInput = `<input type="number" value="${med.quantity}" min="1" class="med-qty fixed-qty" readonly>`;

                    const priceDisplay = isRejected ?
                        `<span class="rejected-price">R ${med.price.toFixed(2)}</span>` :
                        `R ${med.price.toFixed(2)}`;

                    const rejectionCell = isRejected ?
                        `<td>${med.rejectionReason || 'No reason provided'}</td>` :
                        `<td style="display: none;"></td>`;

                    row.innerHTML = `
                        <td>${checkbox}</td>
                        <td>${med.name}</td>
                        <td>${statusBadge}</td>
                        <td>${quantityInput}</td>
                        <td>${med.instructions}</td>
                        <td>${med.repeats}</td>
                        <td>${priceDisplay}</td>
                        ${rejectionCell}
                    `;
                    tbody.appendChild(row);
                });

                // Show/hide rejection header based on whether there are rejected meds
                const rejectionHeader = document.getElementById('rejectionHeader');
                if (hasRejectedMeds) {
                    rejectionHeader.style.display = 'table-cell';
                } else {
                    rejectionHeader.style.display = 'none';
                }

                updateTotal();
                console.log('Medications loaded successfully');
            } catch (error) {
                console.error('Error loading medications:', error);
                const tbody = document.getElementById('modalMedications');
                tbody.innerHTML = '<tr><td colspan="8" class="error-message">❌ Error loading medications. Please try again.</td></tr>';
            }
        }

        function updateTotal() {
            let total = 0;
            const checkboxes = document.querySelectorAll(".med-check:not(:disabled)");
            checkboxes.forEach(cb => {
                if (cb.checked) {
                    const price = parseFloat(cb.getAttribute("data-price"));
                    const qtyInput = cb.closest('tr').querySelector('.med-qty');
                    const qty = parseInt(qtyInput.value) || 1;
                    total += price * qty;
                }
            });

            const vat = total * 0.15;
            const totalDue = (total + vat).toFixed(2);
            document.getElementById("totalDue").textContent = totalDue;
        }

        async function placeMedicationOrder() {
            const selectedMedications = [];
            const prescriptionId = document.getElementById("modalPrescriptionId").value;

            document.querySelectorAll('.med-check:not(:disabled):checked').forEach(checkbox => {
                const medicationId = checkbox.getAttribute('data-medicationid');
                const scriptLineId = checkbox.getAttribute('data-scriptlineid');
                const row = checkbox.closest('tr');
                const qtyInput = row.querySelector('.med-qty');
                const qty = parseInt(qtyInput.value) || 1;
                const instructions = row.cells[4].textContent;

                selectedMedications.push({
                    medicationId: parseInt(medicationId),
                    scriptLineId: parseInt(scriptLineId),
                    quantity: qty,
                    instructions: instructions,
                    isRepeat: false
                });
            });

            if (selectedMedications.length === 0) {
                alert('Please select at least one medication.');
                return;
            }

            try {
                console.log('Submitting order:', selectedMedications);
                const response = await fetch('@Url.Action("SubmitOrder", "CustomerDashboard")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        orderItems: selectedMedications,
                        doctorId: null
                    })
                });

                const result = await response.json();
                console.log('Order response:', result);

                if (result.success) {
                    alert('✅ Order placed successfully!');
                    closeModal();
                } else {
                    alert('❌ Error: ' + result.message);
                }
            } catch (error) {
                console.error('Error placing order:', error);
                alert('❌ Error placing order: ' + error.message);
            }
        }

        // Profile menu functions
        function toggleProfileMenu() {
            const menu = document.getElementById('profileMenu');
            if (menu) {
                menu.classList.toggle('hidden');
            }
        }

        // Close profile menu when clicking outside
        document.addEventListener('click', function(event) {
            const profileMenu = document.getElementById('profileMenu');
            const profileIcon = document.querySelector('.profile-icon');

            if (profileMenu && !profileMenu.contains(event.target) && !profileIcon.contains(event.target)) {
                profileMenu.classList.add('hidden');
            }
        });

        // Request refill function
        async function requestRefill(scriptLineId, btn) {
            try {
                const response = await fetch('@Url.Action("RequestRefill", "CustomerDashboard")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(scriptLineId)
                });

                const result = await response.json();

                if (result.success) {
                    alert('✅ ' + result.message);
                    // Update the UI
                    const countElem = btn.parentElement.parentElement.querySelector('.repeat-count');
                    if (countElem) {
                        countElem.textContent = result.repeatsLeft;
                    }
                    if (result.repeatsLeft === 0) {
                        btn.disabled = true;
                        btn.textContent = "No repeats left";
                        btn.style.backgroundColor = "#ccc";
                    }
                } else {
                    alert('❌ Error: ' + result.message);
                }
            } catch (error) {
                alert('❌ Error requesting refill: ' + error.message);
            }
        }
    </script>
</body>
</html>